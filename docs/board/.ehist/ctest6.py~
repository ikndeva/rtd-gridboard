# coding: utf_8
# btest1.py
# 画盤モジュールのテスト
import sys
from argparse import ArgumentParser
import cairo 
import math 

import common as com 
import vector as vec 
import crtool 
import cboard as bd
import cimage as pim

verbose = True

#色
fancy = ['lightskyblue', 'lightgreen', 'lightgrey']
solid = ['red', 'lightcoral', 'orange', 'darkorchid', 'royalblue', ]

#画像の解像度をppi (pixel per inch)で設定する
#myppi = 1024
#myppi = 572

##=====
## コマンドライン引数
##=====
CMD_NAME = (__file__.split('/'))[-1]

def reading_args_and_options():
    USAGE_STR = f'Usage: python3 { CMD_NAME } OPTIONS '
    ap = ArgumentParser(usage=USAGE_STR)
    ## 
    # ap.add_argument('args', type=str,
    #                 ##note: デフォールトはpositional argなのでdestは不要
    #                 help='sequence of numbers')
    ## options: 
    ## noshow
    ap.add_argument('-n', '--noshow', action='store_true', default=False, 
                    help='supreess to displaying graphics')
    ## verbose 
    ap.add_argument('-v', '--verbose', action='store_true', default=False, 
                    help='show verbose messages')
    ## 
    args = ap.parse_args()
    return args, ap


##======
## メイン文
##======

if __name__ == '__main__':
    #コマンドラインの引数とオプションの読み込み
    opt, ap = reading_args_and_options()

    #parameters
    verbose=False

    # 位置指定による2D配置のテスト
    #画像枠の生成
    CV = bd.Canvas(outfile="out",
                   imagesize='QVGA',
                   verbose=True)

    pim = CV.getImageBoard() ##ImageBoardオブジェクト
    cr = pim.context()

    #============
    #描画: Board
    #============
    hnum = 6

    #マーカーを格子に配置
    hspan, vspan = 50, 50
    # hspan, vspan = 100, 100
    for i in range(hnum): 
        for j in range(4):
            px, py = hspan*i, vspan*j
            crtool.cr_draw_marker(px, py, r=2, context=cr,
                                  ffamily="Sans", source_rgb=crtool.MYCOL['grey25'])
            #crtool.cr_text(px, py, msg=f'({px},{py})', source_rgb=crtool.MYCOL['grey25'], fsize=5, context=cr)
            cr.stroke()

    #色見本を格子に配置
    i, dskip = 0, 20
    bspan = 0.25*hspan
    cr.save()
    cr.translate(dskip, dskip)
    for col, rgb in crtool.MYCOL.items():
        cr.set_source_rgb(rgb[0], rgb[1], rgb[2])
        #矩形
        crtool.cr_rectangle(0.0, 0.0, bspan, bspan, fill='fill',
                            source_rgb=None,
                            edge_rgb=crtool.MYCOL['black'],
                            context=cr)
        cr.rectangle(0.0, 0.0, bspan, bspan)
        crtool.cr_text(0.0, bspan, msg=f'{ col }', source_rgb=rgb, context=cr)
        cr.fill()
        cr.translate(hspan, 0.0)
        i += 1
        if i % hnum == 0:
            for i_ in range(hnum):
                cr.translate((-1.0)*hspan, 0.0)
            cr.translate(0.0, 1.0*vspan)
                
    cr.restore()

    #長方形
    COL = [(0,0,1), (0,0.5,0), (1,0,0)]
    def add_alpha(rgb, alpha=None):
        if len(rgb)==3 and alpha!=None:
            return (rgb[0], rgb[1], rgb[2], alpha)
        else:
            return rgb

    """
    mtx = Matrix(xx=1.0, yx=0.0, xy=0.0, yy=1.0, x0=0.0, y0=0.0)

    transformaton mtx: x, y => x_new, y_new
    x_new = xx * x + xy * y + x0
    y_new = yx * x + yy * y + y0
    """
        
    #1スパン下へ移動
    cr.translate(0, vspan) #layer1
    mtx1 = cairo.Matrix() #identity
    for i in range(4):
        cr.save()  #push layer1.i
        #1スパン右への並行移動を，i回合成する
        for j in range(i): 
            cr.translate(hspan, 0) #these transfomations are composed

        #ゆがみ変形を蓄積
        for j in range(i): #x<=x, y<=0.5*xのゆがみ変換をi回合成する
            mtx = cairo.Matrix()
            mtx.rotate(math.pi/12.0)
            cr.transform(mtx)
        
        #円
        # pim.circle(0, 0, 25, source_rgb=(0.25,0.25,0.25, 0.5))
        pim.arc(0, 0, 10, math.pi*0.0, math.pi*1.0,
                fill='stroke', 
                source_rgb=crtool.MYCOL['red'])
        crtool.cr_text(5, +5, msg=f'{180*(i/12.0):.0f} deg',
                       source_rgb=COL[i % len(COL)], 
                       context=cr)
        # pim.text(5, 5, msg=f'{180*(i/12.0):.0f} deg',
        #          source_rgb=COL[i % len(COL)],
        #          fill='stroke', 
        #          context=cr)
        cr.restore()  #pop layer1.i
    pass 
    

    #============
    #印刷
    #============
    CV.show(noshow=opt.noshow)
    pass 

##EOF


