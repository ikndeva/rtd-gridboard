# coding: utf_8
# btest1.py
# 画盤モジュールのテスト
import sys
from argparse import ArgumentParser 
import common as com 
import vector as vec 
import board as bd

verbose = True

#色
fancy = ['lightskyblue', 'lightgreen', 'lightgrey']
solid = ['red', 'lightcoral', 'orange', 'darkorchid', 'royalblue', ]

#画像の解像度をppi (pixel per inch)で設定する
#myppi = 1024
#myppi = 572

##=====
## コマンドライン引数
##=====
CMD_NAME = (__file__.split('/'))[-1]

def reading_args_and_options():
    USAGE_STR = f'Usage: python3 { CMD_NAME } OPTIONS '
    ap = ArgumentParser(usage=USAGE_STR)
    ## 
    # ap.add_argument('args', type=str,
    #                 ##note: デフォールトはpositional argなのでdestは不要
    #                 help='sequence of numbers')
    ## options: 
    ## noshow
    ap.add_argument('-n', '--noshow', action='store_true', default=False, 
                    help='supreess to displaying graphics')
    ## ppi 
    ap.add_argument('-p', '--ppi', type=int, default=144, 
                    help='set resolution parameter ppi (pixel-per-inch)')
    ## shape 
    ap.add_argument('-s', '--shape', type=str, default=None, 
                    help='set the shape to int:int')
    ## width 
    ap.add_argument('-w', '--width', type=int, default=1, 
                    help='set the width of a line')
    ## shape 
    ap.add_argument('-o', '--outline_kind', type=str, default=None, 
                    help="set the type of outlines in ('r', 'rect', 'l', 'line')")
    ## verbose 
    ap.add_argument('-v', '--verbose', action='store_true', default=False, 
                    help='show verbose messages')
    ## 
    args = ap.parse_args()
    return args, ap

#=====
#便利関数
#=====
def pos(xy): 
    return vec.geom_trans_gen(xy, 
                func=lambda p: vec.point_apply(p, 
                        lambda orig:(orig * edgelen)))

##======
## メイン文
##======

if __name__ == '__main__':
    #コマンドラインの引数とオプションの読み込み
    opt, ap = reading_args_and_options()

    #parameters
    verbose=False
    fontsize = 12
    edgelen=2*fontsize
    shape_pt = None
    if opt.width:
        width1=max(1, opt.width)
    else: 
        width1=max(1, int(edgelen/12.0))
    nobj = 3

    #set shape
    shape = [3, 3] #default 
    if opt.shape:
        shape0 = opt.shape.split(':')
        com.ensure(len(shape0)==2, 'shape={mn} must have two numbers!')
        for i in range(2):
            shape[i] = int(shape0[i])
    
    # m, n = shape

    # 位置指定による2D配置のテスト
    #画像枠の生成
    cav = bd.Canvas(ppi=opt.ppi, 
                    shape_pt=shape_pt, 
                    fontsize_regular_pt=fontsize, 
                    verbose=True)

    if opt.verbose:
        print(f'options: shape={ shape }')
    
    #行を繰り返す
    p = (0,0)
    id = 0
    for inew in range(shape[1]): 
        q_mb = (0, inew)
        bg_row = fancy[inew % len(fancy)]
        mb = cav.add(bd.MarginBoard(xy=pos(q_mb), background=bg_row, verbose=True))
        if opt.verbose: print(f'@exp:row[{ inew }]: MarginBoard: q={ q_mb } xy={ pos(q_mb) }')
        #列を繰り返す
        for jnew in range(shape[0]): 
            q = (jnew, 0);
            q1 = vec.add(q, (1,1))
            xy = [pos(q), pos(q1)]
            fg = solid[id % len(solid)]        
            if opt.verbose: print(f'@exp:col{(jnew,inew)}: DrawCommand: q={q} xy={xy}\t')
            id += 1 
            k = id % nobj    
            if k==0: 
                mb.rectangle(xy=xy, fill=fg, 
                             width=width1, 
                             corner_kind='square',
                             outline_kind=opt.outline_kind, 
                             xy_strict=False, 
                             verbose=True)
            elif k==1:
                mb.ellipse(xy=xy, fill=fg, width=width1, 
                           outline_kind=opt.outline_kind, 
                           xy_strict=False,
                           verbose=True)
            elif k==2:
                mb.rectangle(xy=xy, outline=fg, 
                             width=width1, 
                             #corner_kind='round',
                             corner_kind='square',
                             corner='green',
                             outline_kind=opt.outline_kind, 
                             xy_strict=False, 
                             verbose=True)
        if opt.verbose: print('')

    #============
    #描画
    #============
    if opt.noshow:
        print('@warning: main.opt.noshow={opt.noshow}: this is a dry run...')
        noshow_ = True
    else:
        noshow_ = False
    cav.show(noshow=noshow_)
    pass 

##EOF


