# coding: utf_8
# btest1.py
# 画盤モジュールのテスト
# 格子点にマーカーをおき，格子点常に
import sys
from argparse import ArgumentParser
import cairo 
import math 

import common as com 
import vector as vec 
import crtool as crt
import cboard as bd
import cimage as cim

verbose = True

#色
fancy = ['lightskyblue', 'lightgreen', 'lightgrey']
solid = ['red', 'lightcoral', 'orange', 'darkorchid', 'royalblue', ]

#画像の解像度をppi (pixel per inch)で設定する
#myppi = 1024
#myppi = 572

##=====
## コマンドライン引数
##=====
CMD_NAME = (__file__.split('/'))[-1]

def reading_args_and_options():
    USAGE_STR = f'Usage: python3 { CMD_NAME } OPTIONS '
    ap = ArgumentParser(usage=USAGE_STR)
    ## 
    # ap.add_argument('args', type=str,
    #                 ##note: デフォールトはpositional argなのでdestは不要
    #                 help='sequence of numbers')
    ## options: 
    ## noshow
    ap.add_argument('-n', '--noshow', action='store_true', default=False, 
                    help='supreess to displaying graphics')
    ## verbose 
    ap.add_argument('-v', '--verbose', action='store_true', default=False, 
                    help='show verbose messages')
    ## 
    args = ap.parse_args()
    return args, ap


##======
## メイン文
##======

if __name__ == '__main__':
    #コマンドラインの引数とオプションの読み込み
    opt, ap = reading_args_and_options()

    #parameters
    verbose=False

    # 位置指定による2D配置のテスト
    #画像枠の生成
    CV = bd.Canvas(outfile="out",
                   imagesize='QVGA',
                   verbose=True)

    cim = CV.getImageBoard() ##ImageBoardオブジェクト
    cr = cim.context()

    #============
    #描画: Board
    #============
    line_width = 2 
    cr.set_line_width(line_width)
    mygrey = crt.MYCOL['grey50']
    
    cr.save() ## 
    dskip = 20
    cr.translate(dskip, dskip)
    
    hnum, vnum = 6, 5
    #マーカーを格子に配置
    hspan, vspan = 50, 50
    cr.save() ## 
    for i in range(vnum): 
        cr.save() ## 
        for j in range(hnum):
            crt.cr_draw_marker(0, 0, r=2, context=cr,
                                  ffamily="Sans", source_rgb=crt.MYCOL['grey25'])
            cr.stroke()
            cr.translate(hspan, 0) ##
        cr.restore() ## 
        cr.translate(0, vspan) ##
    cr.restore() ## 

    #============
    #色見本を格子に配置
    cr.save() ## a region begin
    bspan = 0.25*hspan
    cr.save() ## the first line begins
    i = 0
    for col, rgb in crt.MYCOL.items():
        #============
        # セル
        cr.save() ## a block begins: cell 
        cr.set_source_rgb(rgb[0], rgb[1], rgb[2])
        #======
        #円
        cr.save() ## a block begins: circle
        cr.translate(hspan*0.5, vspan*0.5)
        cim.arc(0, 0, hspan*0.5 - line_width*0.5,
                math.pi*0.0, math.pi*2.0,
                source_rgb=rgb, fill='stroke')
        cr.restore() ## a block ends: circle 
        #======
        ## テキストcolname. 下にbspanだけ下げる．
        cr.save() ## a block begins: text
        crt.cr_set_text_papameters(ffamily="Sans", fsize=10, source_rgb=mygrey, context=cr)
        _, _, twidth, theight, _, _ = crt.cr_text_extent(0, 0, msg=f'{ col }', context=cr)
        cr.translate(hspan*0.5 - twidth*0.5,
                     vspan*0.5 - theight*0.5) #move origin 
        crt.cr_text(0, 0, msg=f'{ col }', context=cr)
        cr.fill()
        cr.restore() ## a block ends: text
        #======
        cr.restore() ## a block ends: cell
        #============
        ## 
        cr.translate(hspan, 0.0) ## move rightward
        i += 1

        ## line folding 
        if i % (hnum - 1) == 0:
            cr.restore() ## a line end 
            cr.translate(0.0, 1.0*vspan) ## move downward
            cr.save() ## a line begin
    cr.restore() ## the final line ends 
    #============

    cr.restore() ## a region end
    #============
    
    cr.restore()  #pop layer1.i
    #色見本
    #============
    pass 
    

    #============
    #印刷
    #============
    CV.show(noshow=opt.noshow)
    pass 

##EOF


